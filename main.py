import logging
from aiogram import Bot, Dispatcher, executor, types

import Events as events
import markups as nav
from db import Database

TOKEN = "5206592644:AAHbD4XE8JCJygcHW6hz5w0QSIKro9COV4A"
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)

dp = Dispatcher(bot)

event = events.Events

event_db = events.generate_db("events.db")

db = Database('database.db')
name = ""
date = ""
organizer = ""
count_of_registered = ""


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=nav.mainMenu)


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.chat.type == 'private':
        if message.text == 'üë• –ü—Ä–æ—Ñ–∏–ª—å':
            user_nickname = "–í–∞—à –Ω–∏–∫: " + db.get_nickname(message.from_user.id) + "\n"
            user_age = "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: " + db.get_age(message.from_user.id)
            res = user_nickname + user_age
            await bot.send_message(message.from_user.id, res, reply_markup=nav.profileMenu)
        elif message.text == '‚ù§ –ü–æ–¥–ø–∏—Å–∫–∞':
            await bot.send_message(message.from_user.id, "Coming soon... –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
        elif message.text == '‚Ñπ –ü–æ–º–æ—â—å':
            await bot.send_message(message.from_user.id, "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∫–æ–º–∞–Ω–¥—ã")
        elif message.text == '‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await bot.send_message(message.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=nav.mainMenu)
        elif message.text == 'üñäÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
            await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            db.set_signup(message.from_user.id, "setnewnickname")
        elif message.text == 'üë• –°–æ–±—ã—Ç–∏—è':
            await bot.send_message(message.from_user.id, "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=nav.eventMenu)
        elif message.text == '–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
            await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            event.set_status(message.from_user.id, 'seteventname')
        elif message.text == '–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
            event.delete_event(message.from_user.id)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
            event.edit_event(message.from_user.id)
        elif message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
            event.get_info(message.from_user.id)
        else:
            global name, date, organizer, count_of_registered
            if db.get_signup(message.from_user.id) == "setnickname":
                if len(message.text) > 15:
                    await bot.send_message((message.from_user.id, "–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤"))
                elif '@' in message.text or '/' in message.text:
                    await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª")
                else:
                    db.set_nickname(message.from_user.id, message.text)
                    db.set_signup(message.from_user.id, "setage")
                    await bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
            elif db.get_signup(message.from_user.id) == "setage":
                try:
                    int(message.text)
                except ValueError:
                    await bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞")
                else:
                    if 10 < int(message.text) < 100:
                        db.set_age(message.from_user.id, message.text)
                        db.set_signup(message.from_user.id, "done")
                        await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ü–∏—é. –¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ "
                                                                     "–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞")
                    else:
                        await bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞")
            elif db.get_signup(message.from_user.id) == "setnewnickname":
                if len(message.text) > 15:
                    await bot.send_message((message.from_user.id, "–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤"))
                elif '@' in message.text or '/' in message.text:
                    await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª")
                else:
                    db.set_nickname(message.from_user.id, message.text)
                    db.set_signup(message.from_user.id, "setnewage")
                    await bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
            elif db.get_signup(message.from_user.id) == "setnewage":
                try:
                    int(message.text)
                except ValueError:
                    await bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á—á–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞")
                else:
                    if 10 < int(message.text) < 100:
                        db.set_age(message.from_user.id, message.text)
                        db.set_signup(message.from_user.id, "done")
                        await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–æ")

            # Set new status to name event
            elif event.get_status(message.from_user.id, message.from_user.id) == "seteventname":
                # Checking for forbidden symbols
                if '@' in message.text or '/' in message.text:
                    await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª")
                else:
                    name = message.text
                    event.Events.set_status(message.from_user.id, "seteventdate")
                    await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥")
            elif event.Events.get_status(message.from_user.id) == "seteventdate":
                if '@' in message.text or '/' in message.text:
                    await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª")
                else:
                    date = message.text
                    event.Events.set_status(message.from_user.id, "setorganisationname")
                    await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            elif event.Events.get_status(message.from_user.id) == "setorganisationname":
                if '@' in message.text or '/' in message.text:
                    await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª")
                else:
                    organizer = message.text
                    event.Events.set_status(message.from_user.id, "setcountpeopleonevent")
                    await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏")
            elif event.Events.get_status(message.from_user.id) == "setcountpeopleonevent":
                if '@' in message.text or '/' in message.text:
                    await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª")
                else:
                    count_of_registered = message.text
                    event.Events.set_status(message.from_user.id, "done")
                    await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏")
            if event.Events.get_status(message.from_user.id) == "done":
                event.Events.add_event(message.from_user.id, name, date, organizer, count_of_registered,
                                       event.Events.get_status(message.from_user.id))
                await bot.send_message(message.from_user.id, "–ü–æ–ª—É—á–∏–ª–æ—Å—å! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ")


            # elif Event_status == 1:
            #     name = message.text
            #     await bot.send_message(message.from_user.id, "")
            #     Event_status = 2
            # elif Event_status == 2:
            #     date = message.text
            #     await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
            #     Event_status = 3
            # elif Event_status == 3:
            #     organizer = message.text
            #     await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏")
            #     Event_status = 4
            # elif Event_status == 4:
            #     count_of_registered = message.text
            #     events.Events.add_event(message.from_user.id, name, date, organizer, count_of_registered)

            else:
                await bot.send_message(message.from_user.id, "–Ø –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ "
                                                             "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–π–º—É :)")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
